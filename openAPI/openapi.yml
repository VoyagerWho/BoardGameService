openapi: 3.0.0
info:
  title: API of a game server
  description: |
    This API represents minimal required functionality
    of a server that runs board game logic
  version: 0.0.1
components:
  schemas:
    PlainResponse:
      type: object
      properties:
        accepted:
          type: boolean
        message:
          type: string
      required:
        - accepted
        - message
    GameState:
      type: object
      properties:
        accepted:
          type: boolean
        message:
          type: string
        board:
          $ref: '#/components/schemas/boardData'
        boards:
          type: array
          minItems: 2
          items:
            $ref: '#/components/schemas/boardData'
        score:
          type: array
          minItems: 3
          items:
            type: integer
            minimum: 0
        state:
          type: object
          properties:
            gameActive:
              type: boolean
            playerWon:
              type: integer
              minimum: 1
            draw:
              type: boolean
          required:
            - gameActive
        nextMove:
          type: string
          enum:
            - choice
            - move
            - throw
        nextPlayer:
          type: integer
          minimum: 1
      required:
        - accepted
        - message
        - score
        - state
        - nextMove
        - nextPlayer
    boardData:
      type: array
      minItems: 1
      items:
        type: integer
        minimum: 0
    simpleBoard:
      type: object
      properties:
        type:
          type: string
          enum:
            - simple
        rowCount:
          type: integer
          minimum: 1
          maximum: 9
        rowLabels:
          type: string
          enum:
            - d
            - l
        columnCount:
          type: integer
          minimum: 1
          maximum: 9
        columnLabels:
          type: string
          enum:
            - d
            - l
        tileWidth:
          type: integer
          minimum: 0
        tileHeight:
          type: integer
          minimum: 0
        textures:
          type: array
          items:
            type: string
          minItems: 2
      required:
        - type
        - rowCount
        - rowLabels
        - columnCount
        - columnLabels
        - tileWidth
        - tileHeight
        - textures
    customBoard:
      type: object
      properties:
        type:
          type: string
          enum:
            - custom
        tileWidth:
          type: integer
          minimum: 0
        tileHeight:
          type: integer
          minimum: 0
        width:
          type: integer
          minimum: 0
        height:
          type: integer
          minimum: 0
        background:
          type: object
          properties:
            color:
              type: string
            image:
              type: string
        textures:
          type: array
          items:
            type: string
          minItems: 2
        tiles:
          type: array
          items:
            type: object
            properties:
              x:
                type: integer
                minimum: 0
              'y':
                type: integer
                minimum: 0
              name:
                type: string
            required:
              - x
              - 'y'
              - name
      required:
        - tileWidth
        - tileHeight
        - width
        - height
        - background
        - textures
        - tiles
    randomBoard:
      type: object
      properties:
        type:
          type: string
          enum:
            - random
        real:
          type: boolean
        numberOfSides:
          type: integer
          minimum: 2
        numberOfDices:
          type: integer
          minimum: 1
        rotations:
          type: integer
          minimum: 1
      required:
        - type
        - real
        - numberOfDices
        - rotations
    GameAPI:
      type: object
      properties:
        accepted:
          type: boolean
        api:
          type: object
          properties:
            name:
              type: string
              pattern: ^(?:(?![<>]).)*$
            hostname:
              type: string
              format: hostname
            port:
              type: integer
              minimum: 1
              maximum: 65535
            description:
              type: string
              pattern: ^(?:(?![<>]).)*$
            minNoPlayers:
              type: integer
              minimum: 1
            maxNoPlayers:
              type: integer
              minimum: 1
            board:
              anyOf:
                - $ref: '#/components/schemas/simpleBoard'
                - $ref: '#/components/schemas/customBoard'
                - $ref: '#/components/schemas/randomBoard'
            boards:
              type: array
              minItems: 1
              items:
                anyOf:
                  - $ref: '#/components/schemas/simpleBoard'
                  - $ref: '#/components/schemas/customBoard'
                  - $ref: '#/components/schemas/randomBoard'
            functions:
              type: object
              properties:
                API:
                  type: string
                NewGame:
                  type: string
                NewRound:
                  type: string
                Move:
                  type: string
                Update:
                  type: string
                Status:
                  type: string
                Open:
                  type: string
                Close:
                  type: string
              required:
                - API
                - NewGame
                - NewRound
                - Move
                - Update
                - Status
                - Open
                - Close
          required:
            - name
            - hostname
            - description
            - maxNoPlayers
            - functions
      required:
        - accepted
        - api
    RoomID:
      type: object
      properties:
        room:
          type: string
      required:
        - room
    Move:
      type: object
      properties:
        room:
          type: string
        player:
          type: integer
          minimum: 1
        move:
          type: string
        board:
          type: integer
          minimum: 0
        dices:
          type: array
          items:
            type: array
            items:
              type: integer
              minimum: 1
            minItems: 2
          minItems: 1
      required:
        - room
        - player
        - move
        - board
    Update:
      type: object
      properties:
        room:
          type: string
        player:
          type: integer
          minimum: 0
      required:
        - room
        - player
    NewGame:
      type: object
      properties:
        room:
          type: string
        players:
          type: integer
          minimum: 1
      required:
        - room
        - players
    Status:
      type: object
      properties:
        room:
          type: string
    RoomState:
      type: object
      properties:
        accepted:
          type: boolean
        score:
          type: array
          minItems: 3
          items:
            type: integer
            minimum: 0
        state:
          type: object
          properties:
            gameActive:
              type: boolean
            playerWon:
              type: integer
              minimum: 1
            draw:
              type: boolean
          required:
            - gameActive
        message:
          type: string
      required:
        - accepted
        - score
        - state
        - message
  parameters:
    GameName:
      name: GameName
      in: path
      description: Name of the game
      required: true
      schema:
        type: string
  requestBodies:
    RoomID:
      description: Room identifier to be accessed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RoomID'
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/RoomID'
    Move:
      description: Move data made by player
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Move'
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/Move'
    Update:
      description: Room and User identifier
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Update'
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/Update'
    NewGame:
      description: Number of Players
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NewGame'
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/NewGame'
    Status:
      description: Room identifier to be accessed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Status'
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/Status'
  responses:
    Plain:
      description: Basic response for request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PlainResponse'
    GameAPI:
      description: Game API description.
      content:
        application/json:
          schema:
            anyOf:
              - $ref: '#/components/schemas/GameAPI'
              - $ref: '#/components/schemas/PlainResponse'
    GameState:
      description: Update response.
      content:
        application/json:
          schema:
            anyOf:
              - $ref: '#/components/schemas/GameState'
              - $ref: '#/components/schemas/PlainResponse'
    Status:
      description: Room status.
      content:
        application/json:
          schema:
            anyOf:
              - $ref: '#/components/schemas/RoomState'
              - $ref: '#/components/schemas/PlainResponse'
paths:
  /:
    get:
      summary: Debug
      description: Debug page
      responses:
        '200':
          description: Success
          content:
            text/html: {}
  /MDGABG:
    get:
      summary: Background for MDGA
      description: Background image for Man Don't Get Angry
      responses:
        '200':
          description: Success
          content:
            image/png: {}
  /static/{filename}:
    parameters:
      - name: filename
        in: path
        description: Name of the file
        required: true
        schema:
          type: string
    get:
      summary: Route for static files
      description: Access for any static file outside API
      responses:
        '200':
          description: Success
          content:
            text/css: {}
            application/javascript: {}
  /{GameName}/api:
    parameters:
      - $ref: '#/components/parameters/GameName'
    get:
      summary: Get the API description of the game
      description: |
        Retrieves the API description of the game
      responses:
        '200':
          $ref: '#/components/responses/GameAPI'
    post:
      summary: Get the API description of the game
      description: |
        Retrieves the API description of the game
      responses:
        '200':
          $ref: '#/components/responses/GameAPI'
  /{GameName}/Open:
    parameters:
      - $ref: '#/components/parameters/GameName'
    post:
      summary: Open an instance of the game
      description: |
        Open new instance of the game for purposes of a single room
      requestBody:
        $ref: '#/components/requestBodies/RoomID'
      responses:
        '200':
          $ref: '#/components/responses/Plain'
  /{GameName}/Close:
    parameters:
      - $ref: '#/components/parameters/GameName'
    post:
      summary: Close the instance of the game
      description: |
        Close the instance of the game for purposes of a single room
      requestBody:
        $ref: '#/components/requestBodies/RoomID'
      responses:
        '200':
          $ref: '#/components/responses/Plain'
  /{GameName}/Status:
    parameters:
      - $ref: '#/components/parameters/GameName'
    post:
      summary: Get status of the instance of the game
      description: |
        Get status information of the instance of the game
        Data used by Room server
      requestBody:
        $ref: '#/components/requestBodies/Status'
      responses:
        '200':
          $ref: '#/components/responses/Status'
  /{GameName}/NewGame:
    parameters:
      - $ref: '#/components/parameters/GameName'
    post:
      summary: Start the game
      description: |
        Start new game on the instance and clear all data from previous game
      requestBody:
        $ref: '#/components/requestBodies/NewGame'
      responses:
        '200':
          $ref: '#/components/responses/Plain'
  /{GameName}/NewRound:
    parameters:
      - $ref: '#/components/parameters/GameName'
    post:
      summary: Start new round
      description: |
        Start new round game on the instance
      requestBody:
        $ref: '#/components/requestBodies/RoomID'
      responses:
        '200':
          $ref: '#/components/responses/Plain'
  /{GameName}/Move:
    parameters:
      - $ref: '#/components/parameters/GameName'
    post:
      summary: Make action chosen by player
      description: |
        Make actionon the game instance based on the player's input
      requestBody:
        $ref: '#/components/requestBodies/Move'
      responses:
        '200':
          $ref: '#/components/responses/Plain'
  /{GameName}/Update:
    parameters:
      - $ref: '#/components/parameters/GameName'
    post:
      summary: Get state of the game
      description: |
        Get state of the instance of the game
        Data used by Players and Observers
      requestBody:
        $ref: '#/components/requestBodies/Update'
      responses:
        '200':
          $ref: '#/components/responses/GameState'
