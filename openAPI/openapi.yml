openapi: 3.0.0
info:
  title: API of a game server
  description: |
    This API represents minimal required functionality
    of a server that runs board game logic
  version: 0.0.1
components:
  schemas:
    PlainResponse:
      type: object
      properties:
        accepted:
          type: boolean
        message:
          type: string
      required:
        - accepted
        - message
    GameState:
      type: object
      properties:
        accepted:
          type: boolean
        board:
          $ref: '#/components/schemas/boardData'
        boards:
          type: array
          minItems: 2
          items:
            $ref: '#/components/schemas/boardData'
        score:
          type: array
          minItems: 3
          items:
            type: integer
            minimum: 0
        state:
          type: object
          properties:
            gameActive:
              type: boolean
            playerWon:
              type: integer
              minimum: 1
            draw:
              type: boolean
          required:
            - gameActive
        nextMove:
          type: string
          enum:
            - choice
            - move
            - throw
        nextPlayer:
          type: integer
          minimum: 1
      required:
        - accepted
        - score
        - state
        - nextMove
        - nextPlayer
    boardData:
      type: array
      minItems: 1
      items:
        type: string
        minLength: 1
        maxLength: 1
    tableBoard:
      type: object
      properties:
        type:
          type: string
          enum:
            - table
        rowCount:
          type: integer
          minimum: 1
          maximum: 9
        rowLabels:
          type: string
          enum:
            - d
            - l
        columnCount:
          type: integer
          minimum: 1
          maximum: 9
        columnLabels:
          type: string
          enum:
            - d
            - l
      required:
        - type
        - rowCount
        - rowLabels
        - columnCount
        - columnLabels
    GameAPI:
      type: object
      properties:
        name:
          type: string
        hostname:
          type: string
          format: hostname
        port:
          type: integer
          minimum: 1
          maximum: 65535
        description:
          type: string
        maxNoPlayers:
          type: integer
          minimum: 2
        board:
          oneOf:
            - $ref: '#/components/schemas/tableBoard'
        boards:
          type: array
          minItems: 1
          items:
            oneOf:
              - $ref: '#/components/schemas/tableBoard'
        api:
          type: object
          properties:
            API:
              type: string
            NewGame:
              type: string
            NewRound:
              type: string
            Move:
              type: string
            Update:
              type: string
            Status:
              type: string
            Open:
              type: string
            Close:
              type: string
          required:
            - API
            - NewGame
            - NewRound
            - Move
            - Update
            - Status
            - Open
            - Close
      required:
        - name
        - hostname
        - port
        - description
        - maxNoPlayers
        - api
    RoomID:
      type: object
      properties:
        room:
          type: string
      required:
        - room
    Move:
      type: object
      properties:
        room:
          type: string
        player:
          type: integer
          minimum: 1
        move:
          type: string
      required:
        - room
        - player
        - move
    Update:
      type: object
      properties:
        room:
          type: string
        player:
          type: integer
          minimum: 0
      required:
        - room
        - player
  parameters:
    GameName:
      name: GameName
      in: path
      description: Name of the game
      required: true
      schema:
        type: string
  requestBodies:
    RoomID:
      description: Room identifier to be accessed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RoomID'
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/RoomID'
    Move:
      description: Move data made by player
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Move'
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/Move'
    Update:
      description: Room and User identifier
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Update'
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/Update'
  responses:
    NotFound:
      description: Entity not found.
    IllegalInput:
      description: Illegal input for operation.
    GeneralError:
      description: General Error
    Plain:
      description: Basic response for valid request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PlainResponse'
    GameAPI:
      description: Game API description.
      content:
        application/json:
          schema:
            oneOf:
              - $ref: '#/components/schemas/GameAPI'
              - $ref: '#/components/schemas/PlainResponse'
    GameState:
      description: Update response.
      content:
        application/json:
          schema:
            oneOf:
              - $ref: '#/components/schemas/GameState'
              - $ref: '#/components/schemas/PlainResponse'
    Status:
      description: Room status.
      content:
        application/json:
          schema:
            oneOf:
              - $ref: '#/components/schemas/GameState' # !!! wrong !!!
              - $ref: '#/components/schemas/PlainResponse'
paths:
  /:
    get:
      summary: Debug
      description: Debug page
      responses:
        '200':
          description: Success
          content:
            text/html: {}
  /{GameName}/api:
    parameters:
      - $ref: '#/components/parameters/GameName'
    get:
      summary: Get the API describtion of the game
      description: |
        Retrieves the API describtion of the game
      responses:
        '200':
          $ref: '#/components/responses/GameAPI'
    post:
      summary: Get the API describtion of the game
      description: |
        Retrieves the API describtion of the game
      responses:
        '200':
          $ref: '#/components/responses/GameAPI'
  /{GameName}/Open:
    parameters:
      - $ref: '#/components/parameters/GameName'
    post:
      summary: Open an instance of the game
      description: |
        Open new instance of the game for purposes of a single room
      requestBody:
        $ref: '#/components/requestBodies/RoomID'
      responses:
        '200':
          $ref: '#/components/responses/Plain'
  /{GameName}/Close:
    parameters:
      - $ref: '#/components/parameters/GameName'
    post:
      summary: Close the instance of the game
      description: |
        Close the instance of the game for purposes of a single room
      requestBody:
        $ref: '#/components/requestBodies/RoomID'
      responses:
        '200':
          $ref: '#/components/responses/Plain'
  /{GameName}/Status:
    parameters:
      - $ref: '#/components/parameters/GameName'
    post:
      summary: Get status of the instance of the game
      description: |
        Get status information of the instance of the game
        Data used by Room server
      requestBody:
        $ref: '#/components/requestBodies/RoomID'
      responses:
        '200':
          $ref: '#/components/responses/Status'
  /{GameName}/NewGame:
    parameters:
      - $ref: '#/components/parameters/GameName'
    post:
      summary: Start the game
      description: |
        Start new game on the instance and clear all data from previous game
      requestBody:
        $ref: '#/components/requestBodies/RoomID'
      responses:
        '200':
          $ref: '#/components/responses/Plain'
  /{GameName}/NewRound:
    parameters:
      - $ref: '#/components/parameters/GameName'
    post:
      summary: Start new round
      description: |
        Start new round game on the instance
      requestBody:
        $ref: '#/components/requestBodies/RoomID'
      responses:
        '200':
          $ref: '#/components/responses/Plain'
  /{GameName}/Move:
    parameters:
      - $ref: '#/components/parameters/GameName'
    post:
      summary: Make action chosen by player
      description: |
        Make actionon the game instance based on the player's input
      requestBody:
        $ref: '#/components/requestBodies/Move'
      responses:
        '200':
          $ref: '#/components/responses/Plain'
  /{GameName}/Update:
    parameters:
      - $ref: '#/components/parameters/GameName'
    post:
      summary: Get state of the game
      description: |
        Get state of the instance of the game
        Data used by Players and Observers
      requestBody:
        $ref: '#/components/requestBodies/Update'
      responses:
        '200':
          $ref: '#/components/responses/GameState'
