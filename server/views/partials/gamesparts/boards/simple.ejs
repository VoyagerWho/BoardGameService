<div id="layout">
    <%= JSON.stringify(locals.game.board) %>
</div>
<script>
    const nr = <%= locals.game.board.rowCount %>;
    const nc = <%= locals.game.board.columnCount %>;
    const tiles = [new Image(), new Image(), new Image()];
    const tileH = <%=  locals.game.board.tileHeight %>;
    const tileW = <%=  locals.game.board.tileWidth %>;
    const layout = JSON.parse(document.getElementById('layout').innerText);
    const rl = '<%= locals.game.board.rowLabels === 'd' ? '1' : 'a' %>';
    const cl = '<%= locals.game.board.columnLabels === 'd' ? '1' : 'a' %>';
    async function loadImages() {
        const promiseArray = [];
        layout.textures.forEach((imageUrl, index) => {
            promiseArray.push(new Promise(resolve => {
                tiles[index].onload = () => {
                    resolve();
                };

                tiles[index].src = imageUrl;
            }));
        });
        await Promise.all(promiseArray);
        console.log("all images loaded");
        update();
    }
    loadImages();
    function updateGUI(state) {
        document.getElementById('gameStatus').innerHTML = state.gameActiveDesc;
        document.getElementById('playerRound').innerHTML = state.nextPlayerDesc;
        const c = document.getElementById('canvas');
        const ctx = c.getContext('2d');
        const height = c.height;
        const width = c.width;
        for (var i = 0; i < nr; ++i) {
            for (var j = 0; j < nc; ++j)
                ctx.drawImage(
                    tiles[state.board[nr * i + j] || 0],
                    j * tileW,
                    i * tileH,
                    tileW,
                    tileH
                );
        }
        ctx.strokeStyle = '#aaaaaa';
        for (var i = 0; i < nr - 1; ++i) {
            ctx.moveTo(0, (i + 1) * tileH);
            ctx.lineTo(width, (i + 1) * tileH);
            ctx.stroke();
        }
        for (var i = 0; i < nc - 1; ++i) {
            ctx.moveTo((i + 1) * tileW, 0);
            ctx.lineTo((i + 1) * tileW, height);
            ctx.stroke();
        }

        const scoreboard = document.getElementById('scores');
        for (var i = 0; i < scoreboard.children.length; ++i)
            scoreboard.children[i].innerHTML = state.score[i].toString();
    }

    function setup() {
            <% if (locals.uid !== 0) { %>
            document.getElementById('canvas').onclick = function (e) {
                const offsetX = Math.floor(e.offsetX / tileW);
                const offsetY = Math.floor(e.offsetY / tileH);
                makeMove(
                    `${String.fromCharCode(cl.charCodeAt(0) + offsetX)}${String.fromCharCode(
                        rl.charCodeAt(0) + offsetY
                    )}`
                );
            };
            <% } %>
        }
</script>
<canvas id="canvas" class="board" width="<%= locals.game.board.tileWidth*locals.game.board.columnCount%>"
    height="<%= locals.game.board.tileHeight*locals.game.board.rowCount%>">

</canvas>
<form id="ruch">
    <input type="button" id="btnGame" value="Nowa Gra" />
    <input type="button" id="btnRound" value="Nowa Runda" />
</form>
<br />
<%- include('../misc/score.ejs') %>